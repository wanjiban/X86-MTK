### 基于你提供的 `master-X86` 工作流，以下是为 `armvirt-armv8` 架构定制的版本：

name: master-ARMvirt

permissions: write-all

on:
  repository_dispatch:
  workflow_dispatch:

env:
  FREE_DISK_SH: scripts/free_disk_space.sh
  ENV_SH: scripts/environment.sh
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: configs/Packages-armvirt.txt
  SETTINGS_SH: scripts/init-settings.sh
  PACKAGES_SH: scripts/packages.sh
  CLASH_CORE_SH: scripts/preset-clash-core-arm64.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: 检查
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        chmod +x $FREE_DISK_SH && $FREE_DISK_SH
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        chmod +x $ENV_SH && $ENV_SH
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo timedatectl set-timezone "$TZ"
        docker image prune -a -f
        docker container prune -f
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源码
      working-directory: /workdir
      run: |
        git clone $REPO_URL --depth 1 -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 导入补丁和配置 & 执行脚本
      run: |
        [ -d files ] && mv files openwrt/files || echo "files not found"
        [ -f $CONFIG_FILE ] && cat $CONFIG_FILE >> openwrt/.config
        cd openwrt
        echo "CONFIG_TARGET_armvirt=y" >> .config
        echo "CONFIG_TARGET_armvirt_64=y" >> .config
        make defconfig
        chmod +x $GITHUB_WORKSPACE/$SETTINGS_SH && $GITHUB_WORKSPACE/$SETTINGS_SH
        chmod +x $GITHUB_WORKSPACE/$PACKAGES_SH && $GITHUB_WORKSPACE/$PACKAGES_SH
        chmod +x $GITHUB_WORKSPACE/$CLASH_CORE_SH && $GITHUB_WORKSPACE/$CLASH_CORE_SH

    - name: 下载文件
      run: |
        cd openwrt
        make defconfig
        make download -j8 V=10
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译工具链
      id: mtools
      run: |
        cd openwrt
        make defconfig
        make tools/compile -j$(($(nproc)+1)) || make tools/compile -j1 V=s
        make toolchain/compile -j$(($(nproc)+1)) || make toolchain/compile -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 清除工具链编译中间产物
      if: steps.mtools.outputs.status == 'success'
      run: |
        cd openwrt
        rm -rf dl/* build_dir/host/* build_dir/toolchain-*

    - name: 编译内核
      id: mkernel
      if: steps.mtools.outputs.status == 'success'
      run: |
        cd openwrt
        make target/linux/compile -j$(($(nproc)+1)) || make target/linux/compile -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 编译插件
      id: mpackage
      if: steps.mkernel.outputs.status == 'success'
      run: |
        cd openwrt
        make package/compile -j$(($(nproc)+1)) || make package/compile -j1 V=s
        make package/index
        make package/install -j$(nproc) || make package/install -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 清除插件编译文件
      id: cpackage
      if: steps.mpackage.outputs.status == 'success'
      run: |
        cd openwrt
        rm -rf build_dir/target-*/host
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 编译固件
      id: compile
      if: steps.cpackage.outputs.status == 'success'
      run: |
        cd openwrt
        make target/install -j$(nproc) || make target/install -j1 V=s
        make json_overview_image_info
        make checksum
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf *.buildinfo *.json *.manifest packages *.bin
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到发布
      uses: softprops/action-gh-release@v2.0.4
      if: steps.organize.outputs.status == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}-armvirt-armv8
        body: 固件已编译完成，适用于 arm64 平台
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧发布
      uses: dev-drprasad/delete-older-releases@v0.3.3
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 删除旧的构建记录
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 3
